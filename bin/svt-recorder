#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
$:.unshift File.join(File.dirname(File.expand_path(__FILE__)), '..', 'lib')

begin
  require 'svt/recorder'
rescue LoadError
  $:.unshift File.join(File.dirname(File.expand_path(__FILE__)), '..', 'lib')
  require 'rubygems'
  require 'svt/recorder'
end

require 'readline'
require 'optparse'
require 'pp'

STDOUT.sync = true


options = { :subs => true, :video => true }

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: svt-recorder [OPTIONS]... URL [NAME]"
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-h", "--help", "help") do
    puts opt_parser
    exit 0
  end

  opt.on("-p", "--probe", "Only probe for information") do |probe|
    options[:probe] = probe
  end

  opt.on("-r", "--resolution XxY", "Preferred resolution") do |res|
    options[:resolution] = res
  end

  opt.on("-b", "--bitrate BR", "Preferred bitrate") do |br|
    options[:bitrate] = br.to_i
  end

  opt.on("-s", "--skip-subtitles", "Skip subtitles download") do |skipsubs|
    options[:subs] = false
  end

  opt.on("-v", "--skip-video", "Skip video download") do |skipvideo|
    options[:video] = false
  end

  opt.on("-f", "--force", "Overwrite any existing file(s)") do |force|
    options[:force] = force
  end

  opt.on("-q", "--quiet", "Minimize chattiness") do |quiet|
    options[:quiet] = quiet
  end
end

opt_parser.parse!


def read_name suggestion
  puts 'To edit the filename press up arrow'

  Readline::HISTORY.push suggestion
  name = Readline::readline("Filename: [#{suggestion}] ")

  if not name.strip.empty?
    name.strip
  else
    suggestion
  end
end


def ask_force_if_exists name
  if File.exists? name
    STDERR.puts "\nThe file '#{name}' already exists!"

    reply = Readline::readline('Overwrite? Y/n: ')

    if reply.match(/Y/i)
      return true
    else
      puts "Will not overwrite #{name}"
      exit 1
    end
  end
end


def get_filenames options, suggestion, exts
  output_name = nil

  while output_name == nil do
    output_name = ARGV[1] ? ARGV[1].strip : read_name(suggestion)

    return output_name if options[:force]

    exts.each do |ext|
      force = ask_force_if_exists(output_name + ext)
      options[:force] ||= force
    end
  end

  output_name
end


downloader = SVT::Recorder::Base.new(ARGV[0], options)

if options[:probe]
  print "Available resolutions (and bandwidths):\n"
  for k, v in downloader.stream_map.sort_by {|k,v| v['BANDWIDTH'].to_i } do
    print "  #{v['RESOLUTION']}\t#{v['BANDWIDTH']}\n"
  end

  print "\n" + (downloader.subs ? "Has" : "Doesn't have") + " subtitles.\n"

  exit 0
end


exts = [] + (options[:subs] ? ['.srt'] : []) + (options[:subs] ? ['.mp4'] : [])

filename = get_filenames options, downloader.title, exts

SVT::Recorder::HTTPDownload.new(options, downloader, filename).get()
