#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

begin
  require 'svt/recorder'
rescue LoadError
  $:.unshift File.join(File.dirname(File.expand_path(__FILE__)), '..', 'lib')
  require 'rubygems'
  require 'svt/recorder'
end

require 'tempfile'
require 'readline'
require 'ostruct'
require 'progress_bar'

if ARGV.empty? or ARGV[0].match(/\A(-h)|((--)?help)\Z/i)
  puts "Usage: #{$0.split(/\//)[-1]} <SVT Play URL> [name of output file]"
  puts "\tAll parts of the video at SVT Play URL will be recorded."
  puts "\tIf you've supplied an output name that will be used, otherwise you'll be asked."
  puts ''
  exit 0
elsif not ARGV[0].match(/(svtplay|svt\.se)/)
  puts "No valid SVT Play or Play Rapport URL supplied"
  exit 1
end

# Wohoo, don't need wget anymore!
class HTTPDownload
  def initialize(downloader, output)
    @base_url = URI.parse(downloader.base_url)
    @downloader = downloader
    @headers = {'User-Agent' => 'Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.2.10) Gecko/20100914 Firefox/3.6.10'}
    @file = output
    @server = Net::HTTP.start(@base_url.host, @base_url.port)

    if block_given?
      begin
        yield self
      ensure
        close()
      end
    end
  end

  # Will yield the number of megabytes downloaded every megabyte
  def fetch_all
    downloaded = 0
    megabyte = 1024 * 1024
    mb_down = 0
    File.open(@file, 'wb+') do |file|
      @downloader.parts do |part|
        begin
          @server.request_get(part, @headers) do |res|
            res.read_body do |body|
              file.write body
            end
          end # /@server
        rescue Timeout::Error, EOFError, Errno::ECONNRESET => exception
          yield -1
          @server = Net::HTTP.start(@base_url.host, @base_url.port)
          STDERR.puts "Connection error..."
          retry
        end

        yield part
      end # /parts
    end # /File
  end

  def close ; @server.finish ; end
  alias :disconnect :close
end

# Ensure that all output is written to console when it is asked to,
# no buffer for you!
STDOUT.sync = true

downloader = SVT::Recorder.record(ARGV[0])
output_file = if ARGV[1]
                ARGV[1].strip
              else
                puts 'To edit the filename press up arrow'
                Readline::HISTORY.push downloader.title
                name = Readline::readline("Filename: [#{downloader.title}] ")
                if not name.strip.empty?
                  name.strip
                else
                  downloader.title
                end
              end + '.mp4'

if File.exists? output_file
  STDERR.puts "\nThe file '#{output_file}' already exists!"
  overwrite = Readline::readline('Overwrite? Y/N: ')

  exit 1 unless overwrite.match(/Y/i)
end

progress = ProgressBar.new(downloader.parts?, :bar, :elapsed, :eta, :counter)
puts "Starting recording..."
HTTPDownload.new(downloader, output_file) do |down|
  down.fetch_all {|part| progress.increment! }
  puts "\nFinished recording: #{output_file}"
end
